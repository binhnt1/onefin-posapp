package com.onefin.posapp.core.utils

import android.content.Context
import android.text.TextUtils
import com.atg.pos.domain.entities.payment.TLVUtil
import com.onefin.posapp.core.config.CardConstants
import com.onefin.posapp.core.config.MifareConstants
import com.onefin.posapp.core.models.EvmConfig
import com.onefin.posapp.core.models.Terminal
import com.onefin.posapp.core.models.data.CvmConfig
import com.onefin.posapp.core.models.data.MifareData
import com.onefin.posapp.core.utils.UtilHelper.hexStringToByteArray
import com.sunmi.pay.hardware.aidl.AidlConstants
import com.sunmi.pay.hardware.aidlv2.bean.AidV2
import com.sunmi.pay.hardware.aidlv2.bean.CapkV2
import com.sunmi.pay.hardware.aidlv2.bean.EmvTermParamV2
import com.sunmi.pay.hardware.aidlv2.emv.EMVOptV2
import com.sunmi.pay.hardware.aidlv2.readcard.ReadCardOptV2
import com.sunmi.pay.hardware.aidlv2.security.SecurityOptV2
import timber.log.Timber
import java.util.Locale
import kotlin.text.ifEmpty
import kotlin.text.toInt


object EmvUtil {

    fun injectAids(context: Context, emvOptV2: EMVOptV2) {
        try {
            // clear SDK built-in AIDs and CAPKs
            emvOptV2.deleteAid(null)

            // Nạp AID mặc định
            val defaultAidHexStrings = listOf(
                "9F0608A000000333010100DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 1. UnionPay
                "9F0608A000000333010101DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 2. UnionPay
                "9F0608A000000333010102DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 3. UnionPay
                "9F0608A000000333010103DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 4. UnionPay
                "9F0608A000000333010107DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 5. UnionPay
                "9F0607A0000000033010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF2006000200000000DF2106000200000000DFC10B0100", // 6. Visa
                "9F0607A0000000032010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF2006000200000000DF2106000200000000DFC10B0100", // 7. Visa
                "9F0607A0000000031010DF0101009F08020140DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF2006000200000000DF2106000200000000DFC10B0100", // 8. Visa (AID quan trọng)
                "9F0607A0000000043060DF0101009F08020002DF1105FC5058A000DF1205F85058F800DF130504000000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 9. MasterCard
                "9F0607A0000000041010DF0101009F08020002DF1105FC5080A000DF1205F85080F800DF130504000000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF2006000200000000DF2106000200000000DFC10B0100", // 10. MasterCard (AID quan trọng)
                "9F0608A000000333010106DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180101DF2006000200000000DF2106000200000000DFC10B0100", // 11. UnionPay
                "9F0607A0000000651010DF0101009F08020200DF1105FC6024A800DF1205FC60ACF800DF130500100000009F1B0400000000DF150400000000DF160199DF170199DF14039F3704DF180100DF2006000200000000DF2106000200000000DFC10B0100", // 12. JCB
                "9F0607A0000000031010DF0101009F0902008CDF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160100DF170100DF180101DF2106000000005001DF2006000000006000DF1906000000005000DFC10B0100", // 13. Visa
                "9F0607A0000000032010DF0101009F0902008CDF1105D84000A800DF1205D84004F800DF130500100000009F1B0400000000DF150400000000DF160100DF170100DF180101DF2106000000010000DF2006000000100000DF1906000000000010DFC10B0100", // 14. Visa
                "9F0607A0000000041010DF0101009F09020002DF1105FC50A8A000DF1205F850A8F800DF130504000000009F1B0400000000DF150400000000DF160100DF170100DF180101DF2106000000010000DF2006000000100000DF1906000000000010DFC10B0100", // 15. MasterCard
                "9F0607A0000000043060DF0101009F09020002DF1105FC50A8A000DF1205F850A8F800DF130504000000009F1B0400000000DF150400000000DF160100DF170100DF180101DF2106000000010000DF2006000000100000DF1906000000000010DFC10B0100", // 16. MasterCard
                "9F0607A0000000046000DF0101009F09020002DF1105FC50A8A000DF1205F850A8F800DF130504000000009F1B0400000000DF150400000000DF160100DF170100DF180101DF2106000000010000DF2006000000100000DF1906000000000010DFC10B0100", // 17. MasterCard
                "9F0607A00000000410109F09020000DF11050000000000DF12050000000000DF130500000000009F1B0400000000DF150400000000DF160100DF170100DF140b9F37049F47018F019F32019F3C0206439F3D0102DF1906000000000000DF2006999999999999DF21060000000030009F4E009F150211119F160c746573746D65726368616E74DFC10B0100", // 18. MasterCard
                "9F0607A00000000310109F09020000DF11050000000000DF12050000000000DF130500000000009F1B0400000000DF150400000000DF160100DF170100DF14039F37049F3C0206439F3D0102DF1906000000000000DF2006999999999999DF21060000000000009F4E009F150211119F160c746573746D65726368616E74DFC10B0100"  // 19. Visa
            )
            for ((_, aidHexString) in defaultAidHexStrings.withIndex()) {
                try {
                    val aidToAdd = hexStr2Aid(aidHexString) // Parse hex string thành AidV2
                    emvOptV2.addAid(aidToAdd)
                } catch (e: Exception) {
                    Timber.e(e, "   Lỗi khi parse/nạp AID: ${aidHexString.take(50)}...")
                }
            }
            Timber.d("   Nạp AIDs mặc định từ tài liệu thành công!")

            // Nạp AID từ JSON
            injectAidsFromJson(context, emvOptV2)
            Timber.d("   Nạp AIDs từ JSON thành công!")
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    fun injectCapks(context: Context, emvOptV2: EMVOptV2) {
        try {
            // clear SDK built-in AIDs and CAPKs
            emvOptV2.deleteCapk(null, null)

            // Nạp CAPK mặc định
            val defaultCapkHexStrings = listOf(
                "9F0605A0000003339F220102DF0503211231DF060101DF070101DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A57DF040103DF031403BB335A8549A03B87AB089D006F60852E4B8060", // 1. UnionPay Index 02
                "9F0605A0000003339F220103DF0503221231DF060101DF070101DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33DDF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 2. UnionPay Index 03
                "9F0605A0000003339F220104DF0503221231DF060101DF070101DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF1DF040103DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5", // 3. UnionPay Index 04
                "9F0605A0000000039F220147DF028190F562B594C911C0310AEFB002BDFE01CC8C2F1351CAEDD12C5210F4C3507BC106E01BBF94362392F3A66496079CBC8EAD09D5D942B195CA12A8A1AABAEF1D5545AF1693484764DEB625100E15F630510F3E2FB9E00D81F86D4C6F099307182E30F67FBE9C3D91F557BA5AAA1ACFBB625ABFA0176D4CEF3DFE1892BA1EC49F57B5DB6C53147F1DC9FD844298E238A94FEBDF040103DF0503201231", // 4. Visa Index 47
                "9F0605A0000000039F220101DF028180C696034213D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1228DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75DF040103DF0503201231", // 5. Visa Index 01
                "9F0605A0000000039F220107DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725FDF040103DF0503201231", // 6. Visa Index 07
                "9F0605A0000000039F220108DF0281B0D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0BDF040103DF0503201231", // 7. Visa Index 08
                "9F0605A0000000039F220105DF0260D0135CE8A4436C7F9D5CC66547E30EA402F98105B71722E24BC08DCC80AB7E71EC23B8CE6A1DC6AC2A8CF55543D74A8AE7B388F9B174B7F0D756C22CBB5974F9016A56B601CCA64C71F04B78E86C501B193A5556D5389ECE4DEA258AB97F52A3DF060101DF070101DF040103DF031486DF041E7995023552A79E2623E49180C0CD957ADF0503151231", // 8. Visa Index 05
                "9F0605A0000000049F2201FADF0503202001DF060101DF070101DF028190A90FCD55AA2D5D9963E35ED0F440177699832F49C6BAB15CDAE5794BE93F934D4462D5D12762E48C38BA83D8445DEAA74195A301A102B2F114EADA0D180EE5E7A5C73E0C4E11F67A43DDAB5D55683B1474CC0627F44B8D3088A492FFAADAD4F42422D0E7013536C3C49AD3D0FAE96459B0F6B1B6056538A3D6D44640F94467B108867DEC40FAAECD740C00E2B7A8852DDF040103DF03145BED4068D96EA16D2D77E03D6036FC7A160EA99C", // 9. MasterCard Index FA
                "9F0605A0000000049F2201F1DF0503202001DF060101DF070101DF0281b0A0DCF4BDE19C3546B4B6F0414D174DDE294AABBB828C5A834D73AAE27C99B0B053A90278007239B6459FF0BBCD7B4B9C6C50AC02CE91368DA1BD21AAEADBC65347337D89B68F5C99A09D05BE02DD1F8C5BA20E2F13FB2A27C41D3F85CAD5CF6668E75851EC66EDBF98851FD4E42C44C1D59F5984703B27D5B9F21B8FA0D93279FBBF69E090642909C9EA27F898959541AA6757F5F624104F6E1D3A9532F2A6E51515AEAD1B43B3D7835088A2FAFA7BE7DF040103DF0314D8E68DA167AB5A85D8C3D55ECB9B0517A1A5B4BB", // 10. MasterCard Index F1
                "9F0605A0000000049F2201EFDF0503202001DF060101DF070101DF0281f8A191CB87473F29349B5D60A88B3EAEE0973AA6F1A082F358D849FDDFF9C091F899EDA9792CAF09EF28F5D22404B88A2293EEBBC1949C43BEA4D60CFD879A1539544E09E0F09F60F065B2BF2A13ECC705F3D468B9D33AE77AD9D3F19CA40F23DCF5EB7C04DC8F69EBA565B1EBCB4686CD274785530FF6F6E9EE43AA43FDB02CE00DAEC15C7B8FD6A9B394BABA419D3F6DC85E16569BE8E76989688EFEA2DF22FF7D35C043338DEAA982A02B866DE5328519EBBCD6F03CDD686673847F84DB651AB86C28CF1462562C577B853564A290C8556D818531268D25CC98A4CC6A0BDFFFDA2DCCA3A94C998559E307FDDF915006D9A987B07DDAEB3BDF040103DF031421766EBB0EE122AFB65D7845B73DB46BAB65427A", // 11. MasterCard Index EF
                "9F0605A0000000049F220147DF0503202001DF060101DF070101DF028190F562B594C911C0310AEFB002BDFE01CC8C2F1351CAEDD12C5210F4C3507BC106E01BBF94362392F3A66496079CBC8EAD09D5D942B195CA12A8A1AABAEF1D5545AF1693484764DEB625100E15F630510F3E2FB9E00D81F86D4C6F099307182E30F67FBE9C3D91F557BA5AAA1ACFBB625ABFA0176D4CEF3DFE1892BA1EC49F57B5DB6C53147F1DC9FD844298E238A94FEBDF040103DF03146304B43BAF1342F914ABD4B55EE817CEF1FA557F", // 12. MasterCard Index 47
                "9F0605A0000000049F2201F5DF0503202001DF060101DF070101DF0281f8A6E6FB72179506F860CCCA8C27F99CECD94C7D4F3191D303BBEE37481C7AA15F233BA755E9E4376345A9A67E7994BDC1C680BB3522D8C93EB0CCC91AD31AD450DA30D337662D19AC03E2B4EF5F6EC18282D491E19767D7B24542DFDEFF6F62185503532069BBB369E3BB9FB19AC6F1C30B97D249EEE764E0BAC97F25C873D973953E5153A42064BBFABFD06A4BB486860BF6637406C9FC36813A4A75F75C31CCA9F69F8DE59ADECEF6BDE7E07800FCBE035D3176AF8473E23E9AA3DFEE221196D1148302677C720CFE2544A03DB553E7F1B8427BA1CC72B0F29B12DFEF4C081D076D353E71880AADFF386352AF0AB7B28ED49E1E672D11F9DF0403010001DF0314C2239804C8098170BE52D6D5D4159E81CE8466BF", // 13. MasterCard Index F5
                "9F0605A0000000049F2201F7DF0503202001DF060101DF070101DF0281f8B8C5759F96676BEF1FE2DE8AAD8C54B08E919FD1B8C516D70931435E41A306A64A5F73E4542B46BFBDC8EB32E973737406C0DE7AF80FDE023B5F256EF4D120EEB537171D1ADA4D83C307961AF8DB13B63828EE2EE036FAF2C41D5EE250ED2A4AF317511411EDD39CD52F2A10CA17F4FE652FD7E79BC031C36AD26DFB54CFC562551793B04A47ED1A21E96D2E4CA29EB9A4FE6524E6CF69DE5CA5C0BEDFA624AE6BC78FEFE3993564D59B67DED46455040FB3BFD2B6447D111C83C0E29C72C00142BAB87EBCFC54BE58EAEE78292B05F358175DC67F3916CCB08907A41EF0785DAA4D21B279B9A386AB7F6624B2144E3E35C1BF29954B2D7BDF040103DF031486803714DF3BDE4C19F62E1FF01CE96D3C1D1706", // 14. MasterCard Index F7
                "9F0605A0000000049F220105DF0503202001DF060101DF070101DF0281b0B8048ABC30C90D976336543E3FD7091C8FE4800DF820ED55E7E94813ED00555B573FECA3D84AF6131A651D66CFF4284FB13B635EDD0EE40176D8BF04B7FD1C7BACF9AC7327DFAA8AA72D10DB3B8E70B2DDD811CB4196525EA386ACC33C0D9D4575916469C4E4F53E8E1C912CC618CB22DDE7C3568E90022E6BBA770202E4522A2DD623D180E215BD1D1507FE3DC90CA310D27B3EFCCD8F83DE3052CAD1E48938C68D095AAC91B5F37E28BB49EC7ED597DF040103DF0314EBFA0D5D06D8CE702DA3EAE890701D45E274C845", // 15. MasterCard Index 05 (trùng UnionPay?)
                "9F0605A0000000039F220195DF0503202001DF060101DF070101DF028190BE9E1FA5E9A803852999C4AB432DB28600DCD9DAB76DFAAA47355A0FE37B1508AC6BF38860D3C6C2E5B12A3CAAF2A7005A7241EBAA7771112C74CF9A0634652FBCA0E5980C54A64761EA101A114E0F0B5572ADD57D010B7C9C887E104CA4EE1272DA66D997B9A90B5A6D624AB6C57E73C8F919000EB5F684898EF8C3DBEFB330C62660BED88EA78E909AFF05F6DA627BDF040103DF0314EE1511CEC71020A9B90443B37B1D5F6E703030F6", // 16. Visa Index 95
                "9F0605A0000000039F220199DF0503202001DF060101DF070101DF028180AB79FCC9520896967E776E64444E5DCDD6E13611874F3985722520425295EEA4BD0C2781DE7F31CD3D041F565F747306EED62954B17EDABA3A6C5B85A1DE1BEB9A34141AF38FCF8279C9DEA0D5A6710D08DB4124F041945587E20359BAB47B7575AD94262D4B25F264AF33DEDCF28E09615E937DE32EDC03C54445FE7E382777DF040103DF03144ABFFD6B1C51212D05552E431C5B17007D2F5E6D", // 17. Visa Index 99
                "9F0605A0000000039F220150DF0503202001DF060101DF070101DF028180D11197590057B84196C2F4D11A8F3C05408F422A35D702F90106EA5B019BB28AE607AA9CDEBCD0D81A38D48C7EBB0062D287369EC0C42124246AC30D80CD602AB7238D51084DED4698162C59D25EAC1E66255B4DB2352526EF0982C3B8AD3D1CCE85B01DB5788E75E09F44BE7361366DEF9D1E1317B05E5D0FF5290F88A0DB47DF040103DF03145765295089960938BAAA4431506E424295F98BD0", // 18. Visa Index 50
                "9F0605A0000000039F220192DF0503202001DF060101DF070101DF0281b0996AF56F569187D09293C14810450ED8EE3357397B18A2458EFAA92DA3B6DF6514EC060195318FD43BE9B8F0CC669E3F844057CBDDF8BDA191BB64473BC8DC9A730DB8F6B4EDE3924186FFD9B8C7735789C23A36BA0B8AF65372EB57EA5D89E7D14E9C7B6B557460F10885DA16AC923F15AF3758F0F03EBD3C5C2C949CBA306DB44E6A2C076C5F67E281D7EF56785DC4D75945E491F01918800A9E2DC66F60080566CE0DAF8D17EAD46AD8E30A247C9FDF040103DF0314429C954A3859CEF91295F663C963E582ED6EB253", // 19. Visa Index 92
                "9F0605A0000000039F220194DF0503202001DF060101DF070101DF0281f8ACD2B12302EE644F3F835ABD1FC7A6F62CCE48FFEC622AA8EF062BEF6FB8BA8BC68BBF6AB5870EED579BC3973E121303D34841A796D6DCBC41DBF9E52C4609795C0CCF7EE86FA1D5CB041071ED2C51D2202F63F1156C58A92D38BC60BDF424E1776E2BC9648078A03B36FB554375FC53D57C73F5160EA59F3AFC5398EC7B67758D65C9BFF7828B6B82D4BE124A416AB7301914311EA462C19F771F31B3B57336000DFF732D3B83DE07052D730354D297BEC72871DCCF0E193F171ABA27EE464C6A97690943D59BDABB2A27EB71CEEBDAFA1176046478FD62FEC452D5CA393296530AA3F41927ADFE434A2DF2AE3054F8840657A26E0FC617DF040103DF0314C4A3C43CCF87327D136B804160E47D43B60E6E0F", // 20. Visa Index 94
                "9F0605A0000005249F220104DF0503211231DF060101DF070101DF0803000000DF028180A1F5E1C9BD8650BD43AB6EE56B891EF7459C0A24FA84F9127D1A6C79D4930F6DB1852E2510F18B61CD354DB83A356BD190B88AB8DF04284D02A4204A7B6CB7C5551977A9B36379CA3DE1A08E69F301C95CC1C20506959275F41723DD5D2925290579E5A95B0DF6323FC8E9273D6F849198C4996209166D9BFC973C361CC826E1DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 21. Rupay Index 04
                "9F0605A0000005249F220105DF0503211231DF060101DF070101DF0803000000DF0281C0A99A6D3E071889ED9E3A0C391C69B0B804FC160B2B4BDD570C92DD5A0F45F53E8621F7C96C40224266735E1EE1B3C06238AE35046320FD8E81F8CEB3F8B4C97B940930A3AC5E790086DAD41A6A4F5117BA1CE2438A51AC053EB002AED866D2C458FD73359021A12029A0C043045C11664FE0219EC63C10BF2155BB2784609A106421D45163799738C1C30909BB6C6FE52BBB76397B9740CE064A613FF8411185F08842A423EAD20EDFFBFF1CD6C3FE0C9821479199C26D8572CC8AFFF087A9C3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 22. Rupay Index 05
                "9F0605A0000005249F220102DF0503211231DF060101DF070101DF0803000000DF0281E0A25A6BD783A5EF6B8FB6F83055C260F5F99EA16678F3B9053E0F6498E82C3F5D1E8C38F13588017E2B12B3D8FF6F50167F46442910729E9E4D1B3739E5067C0AC7A1F4487E35F675BC16E233315165CB142BFDB25E301A632A54A3371EBAB6572DEEBAF370F337F057EE73B4AE46D1A8BC4DA853EC3CC12C8CBC2DA18322D68530C70B22BDAC351DD36068AE321E11ABF264F4D3569BB71214545005558DE26083C735DB776368172FE8C2F5C85E8B5B890CC682911D2DE71FA626B8817FCCC08922B703869F3BAEAC1459D77CD85376BC36182F4238314D6C4212FBDD7F23D3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 23. Rupay Index 02
                "9F0605A0000005249F220103DF0503211231DF060101DF070101DF0803000000DF02818094EA62F6D58320E354C022ADDCF0559D8CF206CD92E869564905CE21D720F971B7AEA374830EBE1757115A85E088D41C6B77CF5EC821F30B1D890417BF2FA31E5908DED5FA677F8C7B184AD09028FDDE96B6A6109850AA800175EABCDBBB684A96C2EB6379DFEA08D32FE2331FE103233AD58DCDB1E6E077CB9F24EAEC5C25AFDF0403010001DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 24. Rupay Index 03
                "9F0605A0000005249F2201F1DF0503211231DF060101DF070101DF0803000000DF0281B0A4DC71056B6607EFD116625AB0506D11DEEB4BAED6475AEF11702C90604BA5D7F2F632236474F0C79E3FBE160A6ABAC126730BD6853ECA412F38CD16DD48129CD53D91F1BB9196F2465C3014FCE2CA702C41472ED0609BD238052FE9C07F38DE7268DF1A0083E4DE20814B5BBFA9ADC33916A049155951648821A05C20CCFD7E8BC141EF3E29A3F306325B13017EDC38D62E03B57A371DFC578274DC78C3FBD6C5E60A0AF2901CAF3B0DD6975EFB5421DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 25. Rupay Index F1
                "9F0605A0000005249F220106DF0503211231DF060101DF070101DF0803000000DF028180A1F5E1C9BD8650BD43AB6EE56B891EF7459C0A24FA84F9127D1A6C79D4930F6DB1852E2510F18B61CD354DB83A356BD190B88AB8DF04284D02A4204A7B6CB7C5551977A9B36379CA3DE1A08E69F301C95CC1C20506959275F41723DD5D2925290579E5A95B0DF6323FC8E9273D6F849198C4996209166D9BFC973C361CC826E1DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 26. Rupay Index 06
                "9F0605A0000005249F220101DF0503211231DF060101DF070101DF0803000000DF0281F8A6E6FB72179506F860CCCA8C27F99CECD94C7D4F3191D303BBEE37481C7AA15F233BA755E9E4376345A9A67E7994BDC1C680BB3522D8C93EB0CCC91AD31AD450DA30D337662D19AC03E2B4EF5F6EC18282D491E19767D7B24542DFDEFF6F62185503532069BBB369E3BB9FB19AC6F1C30B97D249EEE764E0BAC97F25C873D973953E5153A42064BBFABFD06A4BB486860BF6637406C9FC36813A4A75F75C31CCA9F69F8DE59ADECEF6BDE7E07800FCBE035D3176AF8473E23E9AA3DFEE221196D1148302677C720CFE2544A03DB553E7F1B8427BA1CC72B0F29B12DFEF4C081D076D353E71880AADFF386352AF0AB7B28ED49E1E672D11F9DF0403010001DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 27. Rupay Index 01
                "9F0605A0000005249F220100DF0503211231DF060101DF070101DF0803000000DF02819098F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 28. Rupay Index 00
                "9F0605A0000005249F2201F3DF0503211231DF060101DF070101DF0803000000DF02819098F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 29. Rupay Index F3
                "9F0605A0000005249F2201F5DF0503211231DF060101DF070101DF0803000000DF0281F89C40C83BA1B9CA48296D1F7284553ED0BEB2D8D746034EEAD841FE0DB5F031D8EF70FB7E1A3FD479864551ADB333F59EBB9DFE200D813CF777133D51A402C29C282364A9FF4BD3FAD979DE18725BEDBD21B7175A06817BD21EEE4164E84B91F636D79D2BC66E6FFC45A3C75DB507AA086E993B88364C3AF6CBC2D0A34FDC91BF82DB9D750E44358E99D07406B06D7549EDCCD6164FB84C29258B655C2AEB98886BC4AF12AD151ED695B77434C2F857E981B332A9CF5959540CFBC7D1A197256BE75C200D94EF0B16FC34C1ED33D72CA9AABE06EC9019F299B5A322923E5A396C3A59D819BF2627DF82A10F29A1431492D1CCDD9FADA64CB7DF0403010001DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 30. Rupay Index F5
                "9F0605A0000005249F2201F6DF0503211231DF060101DF070101DF0803000000DF0281E0A25A6BD783A5EF6B8FB6F83055C260F5F99EA16678F3B9053E0F6498E82C3F5D1E8C38F13588017E2B12B3D8FF6F50167F46442910729E9E4D1B3739E5067C0AC7A1F4487E35F675BC16E233315165CB142BFDB25E301A632A54A3371EBAB6572DEEBAF370F337F057EE73B4AE46D1A8BC4DA853EC3CC12C8CBC2DA18322D68530C70B22BDAC351DD36068AE321E11ABF264F4D3569BB71214545005558DE26083C735DB776368172FE8C2F5C85E8B5B890CC682911D2DE71FA626B8817FCCC08922B703869F3BAEAC1459D77CD85376BC36182F4238314D6C4212FBDD7F23D3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 31. Rupay Index F6
                "9F0605A0000005249F2201F7DF0503211231DF060101DF070101DF0803000000DF028180924D9576F8FB29F7E086265004EFB5897123F4FC6264E7AA61A53A352D83EFEC14B895101E8F9A00DF895FC780F13CFB5E43471E56BD51B7A6DC48044FA9BEE87032ACBBFB256E9B2559EF6A922F760AEDA1720818A954D6B0DA61F0E101371649898B8E18DCDEAA4BC7867D600A21D6CD462ACDE99F95672D52FECE228DE493DF0403010001DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 32. Rupay Index F7
                "9F0605A0000005249F2201F8DF0503211231DF060101DF070101DF0803000000DF028180A1F5E1C9BD8650BD43AB6EE56B891EF7459C0A24FA84F9127D1A6C79D4930F6DB1852E2510F18B61CD354DB83A356BD190B88AB8DF04284D02A4204A7B6CB7C5551977A9B36379CA3DE1A08E69F301C95CC1C20506959275F41723DD5D2925290579E5A95B0DF6323FC8E9273D6F849198C4996209166D9BFC973C361CC826E1DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 33. Rupay Index F8
                "9F0605A0000005249F2201F9DF0503211231DF060101DF070101DF0803000000DF0281C0A99A6D3E071889ED9E3A0C391C69B0B804FC160B2B4BDD570C92DD5A0F45F53E8621F7C96C40224266735E1EE1B3C06238AE35046320FD8E81F8CEB3F8B4C97B940930A3AC5E790086DAD41A6A4F5117BA1CE2438A51AC053EB002AED866D2C458FD73359021A12029A0C043045C11664FE0219EC63C10BF2155BB2784609A106421D45163799738C1C30909BB6C6FE52BBB76397B9740CE064A613FF8411185F08842A423EAD20EDFFBFF1CD6C3FE0C9821479199C26D8572CC8AFFF087A9C3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 34. Rupay Index F9
                "9F0605A0000005249F2201FADF0503211231DF060101DF070101DF0803000000DF0281A09C6BE5ADB10B4BE3DCE2099B4B210672B89656EBA091204F613ECC623BEDC9C6D77B660E8BAEEA7F7CE30F1B153879A4E36459343D1FE47ACDBD41FCD710030C2BA1D9461597982C6E1BDD08554B726F5EFF7913CE59E79E357295C321E26D0B8BE270A9442345C753E2AA2ACFC9D30850602FE6CAC00C6DDF6B8D9D9B4879B2826B042A07F0E5AE526A3D3C4D22C72B9EAA52EED8893866F866387AC05A1399DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26", // 35. Rupay Index FA
                "9F0605A0000005249F2201FEDF0503211231DF060101DF070101DF0803000000DF02819098F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3DF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26"  // 36. Rupay Index FE
            )
            for (capkHexString in defaultCapkHexStrings) {
                try {
                    val capk = hexStr2Rid(capkHexString) // Parse hex string
                    emvOptV2.addCapk(capk) // Nạp CAPK [cite: 552]
                } catch (e: Exception) {
                    Timber.e(e, "   Lỗi khi parse/nạp CAPK: ${capkHexString.take(50)}...")
                }
            }
            Timber.d("   Nạp CAPKs mặc định từ tài liệu thành công!")

            // Nạp AID từ JSON
            injectCapksFromJson(context, emvOptV2)
            Timber.d("   Nạp CAPKs từ JSON thành công!")
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    fun setTerminalParam(emv: EMVOptV2, terminal: Terminal) {
        try {
            val termParam = EmvTermParamV2().apply {
                // 🔥 COPY Y CHANG TỪ SDK THÀNH CÔNG
                capability = "E0B0C8"
                addCapability = "6000F0A001"
                terminalType = "22"
                countryCode = "0704"
                currencyCode = "0704"
                currencyExp = "02"

                // 🔥 QUAN TRỌNG - Các field này
                IsReadLogInCard = false
                TTQ = "26000080"
                accountType = "00"
                adviceFlag = true
                batchCapture = false
                bypassAllFlg = false
                bypassPin = false
                ectSiFlg = true
                ectSiVal = true
                ectTlFlg = true
                ectTlVal = "100000"
                forceOnline = false
                getDataPIN = true
                ifDsn = "3030303030393035"  // ← SDK có cái này!
                isSupportAccountSelect = true
                isSupportExceptFile = true
                isSupportMultiLang = true
                isSupportSM = true
                isSupportTransLog = true
                scriptMode = false
                surportPSESel = true  // ← PSE!
                termAIP = true  // ← QUAN TRỌNG!
                useTermAIPFlg = true  // ← QUAN TRỌNG!
            }

            Timber.tag("TermParam").d("⚙️ Terminal Params (FULL CONFIG):")
            Timber.tag("TermParam").d("   Capability: ${termParam.capability}")
            Timber.tag("TermParam").d("   termAIP: ${termParam.termAIP}")
            Timber.tag("TermParam").d("   useTermAIPFlg: ${termParam.useTermAIPFlg}")
            Timber.tag("TermParam").d("   surportPSESel: ${termParam.surportPSESel}")
            Timber.tag("TermParam").d("   bypassPin: ${termParam.bypassPin}")

            val result = emv.setTerminalParam(termParam)
            Timber.tag("TermParam").d("   Result: $result")

        } catch (e: Exception) {
            Timber.tag("TermParam").e(e, "❌ Failed to set terminal params")
        }
    }
    fun setEmvTlvs(context: Context, emv: EMVOptV2, terminal: Terminal?) {
        val evmConfigs = terminal?.evmConfigs
        setGlobalTlvs(emv, terminal)

        // 🔥 MỚI: Load CVM config từ JSON
        val cvmConfig = ResourceHelper.loadCvmFromAssets(context)
        evmConfigs?.forEach { config ->
            when (config.vendorName.uppercase(Locale.getDefault())) {
                "JCB" -> setJcbTlvs(emv, config, cvmConfig)
                "NAPAS" -> setNapasTlvs(emv, config, cvmConfig)
                "VISA" -> setPayWaveTlvs(emv, config, cvmConfig)
                "MASTERCARD" -> setPayPassTlvs(emv, config, cvmConfig)
                "UNIONPAY", "UNION PAY" -> setQpbocTlvs(emv, config, cvmConfig)
                "AMEX", "AMERICAN EXPRESS" -> setExpressPayTlvs(emv, config, cvmConfig)
            }
        }
    }
    fun injectKeys(securityOpt: SecurityOptV2, terminal: Terminal): Boolean {
        Timber.tag("KeyInjection").d("🔑 ====== KEY INJECTION START ======")

        return try {
            val bdk = terminal.bdk
            val ksn = terminal.ksn

            // Validate inputs
            if (bdk.isEmpty() || bdk.length != 32) {
                Timber.tag("KeyInjection").e("❌ Invalid BDK length: ${bdk.length}, expected: 32")
                return false
            }

            if (ksn.isEmpty() || ksn.length != 20) {
                Timber.tag("KeyInjection").e("❌ Invalid KSN length: ${ksn.length}, expected: 20")
                return false
            }

            val bdkBytes = hexStringToByteArray(bdk)
            val ksnBytes = hexStringToByteArray(ksn)

            if (bdkBytes.size != 16 || ksnBytes.size != 10) {
                Timber.tag("KeyInjection").e("❌ Invalid byte size - BDK: ${bdkBytes.size}, KSN: ${ksnBytes.size}")
                return false
            }

            // Delete existing keys at common indexes
            val keyIndexes = listOf(0, 1, 2)
            keyIndexes.forEach { index ->
                try {
                    securityOpt.deleteKey(index, 2) // Delete DATA key type
                    Thread.sleep(50)
                } catch (e: Exception) {
                    // Ignore - key might not exist
                }
            }

            val result = securityOpt.savePlaintextKey(
                2,              // keyType: 2 = DATA/BDK
                bdkBytes,       // key bytes
                null,           // checkValue (auto-calculated)
                1,              // keyIndex: 1 (proven to work)
                0               // algorithm: 0 = 3DES
            )

            if (result != 0) {
                Timber.tag("KeyInjection").e("❌ BDK injection failed with code: $result")
                when (result) {
                    -1 -> Timber.tag("KeyInjection").e("   Reason: General error")
                    -2 -> Timber.tag("KeyInjection").e("   Reason: Invalid parameter")
                    -3 -> Timber.tag("KeyInjection").e("   Reason: Key already exists")
                    else -> Timber.tag("KeyInjection").e("   Reason: Unknown error")
                }
                return false
            }

            Timber.tag("KeyInjection").d("✅ BDK injected successfully")
            true

        } catch (e: Exception) {
            false
        }
    }

    private fun setGlobalTlvs(emv: EMVOptV2, terminal: Terminal?) {
        val config: EvmConfig = terminal?.evmConfigs?.firstOrNull() ?: EvmConfig()

        val globalTags = arrayOf(
            "9F1A", "5F2A", "5F36", "9F33", "9F35", "9F40",
            "9F66", "9F09", "9F1C", "9F15", "9F16", "9F1E"
        )

        val ttq = when (config.vendorName.uppercase(Locale.getDefault())) {
            "VISA" -> "26000080"
            "MASTERCARD" -> "3600C080"
            else -> "3600C080"
        }
        val globalValues = arrayOf(
            config.countryCode9F1A,
            config.transCurrencyCode5F2A,
            config.transCurrencyExp,
            config.terminalCap9F33,
            config.terminalType9F35,
            config.exTerminalCap9F40,
            ttq,
            config.version9F09,
            terminal?.tid ?: config.terminalId9F1C,
            config.mcc9F15,
            terminal?.mid ?: config.merchantId9F16,
            "00000001"
        )

        emv.setTlvList(CardConstants.OP_NORMAL, globalTags, globalValues)
    }
    private fun setJcbTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val tags = arrayOf(
            "DF8117", "DF8118", "DF8119", "DF811F", "DF811E", "DF812C",
            "DF8123", "DF8124", "DF8125", "DF8126"
        )

        val chipCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "jcb", "chip")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val contactlessCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "jcb", "contactless")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val floorLimit = config.floorLimit9F1B.ifEmpty { "000000500000" }

        val chipValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            "E8",
            "00",
            floorLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            chipCvm.cvmRequiredLimit
        )

        val contactlessValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            contactlessCvm.contactlessTransLimit,
            contactlessCvm.cvmRequiredLimit,
            contactlessCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            contactlessCvm.cvmRequiredLimit
        )

        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_JCB, tags, contactlessValues)
    }
    private fun setQpbocTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val chipValues = arrayOf("E0", "F8", "F8", "E8", "00")
        val tags = arrayOf("DF69", "DF70", "DF71", "DF72", "DF73")
        val contactlessValues = arrayOf("E0", "F8", "F8", "E8", "00")
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, contactlessValues)
    }
    private fun setNapasTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val tags = arrayOf(
            "DF8117", "DF8118", "DF8119", "DF811F", "DF811E", "DF812C",
            "DF8123", "DF8124", "DF8125", "DF8126"
        )

        val chipCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "napas", "chip")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val contactlessCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "napas", "contactless")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val floorLimit = config.floorLimit9F1B.ifEmpty { "000000500000" }

        val chipValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            "E8",
            chipCvm.cvmRequiredLimit,
            chipCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            chipCvm.cvmRequiredLimit
        )

        val contactlessValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            contactlessCvm.contactlessTransLimit,
            contactlessCvm.cvmRequiredLimit,
            contactlessCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            contactlessCvm.cvmRequiredLimit
        )

        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_PURE, tags, contactlessValues)
    }
    private fun setPayWaveTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val tags = arrayOf(
            "DF8117", "DF8118", "DF8119", "DF811B", "DF811D", "DF811E",
            "DF811F", "DF8120", "DF8121", "DF8122", "DF8123", "DF8124",
            "DF8125", "DF812C"
        )

        val chipCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "visa", "chip")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val contactlessCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "visa", "contactless")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val floorLimit = config.floorLimit9F1B.ifEmpty { "000005000000" }
        val chipValues = arrayOf(
            floorLimit,
            "000000000000",
            "000000999999",
            "30",
            "02",
            chipCvm.cvmRequiredLimit,
            chipCvm.contactlessTransLimit,
            "000000999999",
            chipCvm.contactlessCvmLimit,
            "0000000000",
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            chipCvm.readerCvmRequiredLimit
        )

        val contactlessValues = arrayOf(
            floorLimit,
            "000000000000",
            "000000999999",
            "30",
            "02",
            contactlessCvm.cvmRequiredLimit,
            contactlessCvm.contactlessTransLimit,
            "000000999999",
            contactlessCvm.contactlessCvmLimit,
            "0000000000",
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            contactlessCvm.readerCvmRequiredLimit
        )

        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_PAYWAVE, tags, contactlessValues)
    }
    private fun setPayPassTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val tags = arrayOf(
            "DF8117", "DF8118", "DF8119", "DF811F", "DF811E", "DF812C",
            "DF8123", "DF8124", "DF8125", "DF8126", "DF811B", "DF811D",
            "DF8122", "DF8120", "DF8121"
        )

        val chipCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "master", "chip")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val contactlessCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "master", "contactless")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val floorLimit = config.floorLimit9F1B.ifEmpty { "000000500000" }

        val chipValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            "E8",
            "00",
            chipCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            chipCvm.cvmRequiredLimit,
            "30",
            "02",
            "0000000000",
            "000000000000",
            "000000000000"
        )

        val contactlessValues = arrayOf(
            floorLimit,
            floorLimit,
            floorLimit,
            contactlessCvm.contactlessTransLimit,
            contactlessCvm.cvmRequiredLimit,
            contactlessCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline,
            contactlessCvm.cvmRequiredLimit,
            "30",
            "02",
            "0000000000",
            "000000000000",
            contactlessCvm.contactlessCvmLimit
        )

        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_PAYPASS, tags, contactlessValues)
    }
    private fun setExpressPayTlvs(emv: EMVOptV2, config: EvmConfig, cvmConfig: CvmConfig?) {
        val tags = arrayOf(
            "DF8117", "DF8118", "DF8119", "DF811F", "DF811E", "DF812C",
            "DF8123", "DF8124", "DF8125"
        )

        val chipCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "amex", "chip")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val contactlessCvm = if (cvmConfig != null) {
            ResourceHelper.convertToTlv(cvmConfig, "amex", "contactless")
        } else {
            ResourceHelper.getDefaultTlvValues()
        }

        val chipValues = arrayOf(
            "E0",
            "F8",
            "F8",
            "E8",
            chipCvm.cvmRequiredLimit,
            chipCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline
        )

        val contactlessValues = arrayOf(
            "E0",
            "F8",
            "F8",
            contactlessCvm.contactlessTransLimit,
            contactlessCvm.cvmRequiredLimit,
            contactlessCvm.readerCvmRequiredLimit,
            config.tacDefault,
            config.tacDenial,
            config.tacOnline
        )

        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_NORMAL, tags, chipValues)
        emv.setTlvList(AidlConstants.EMV.TLVOpCode.OP_AE, tags, contactlessValues)
    }

    private fun char2Byte(c: Char): Int {
        if (c >= 'a') {
            return (c.code - 'a'.code + 10) and 0x0f
        }
        if (c >= 'A') {
            return (c.code - 'A'.code + 10) and 0x0f
        }
        return (c.code - '0'.code) and 0x0f
    }
    private fun hexStr2Byte(hexStr: String): Byte {
        return hexStr.toInt(16).toByte()
    }
    private  fun hexStr2Aid(hexStr: String?): AidV2 {
        val aidV2 = AidV2()
        val map = TLVUtil.buildTLVMap(hexStr)
        var tlv = map["DF21"]
        if (tlv != null) {
            aidV2.cvmLmt = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF20"]
        if (tlv != null) {
            aidV2.termClssLmt = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF19"]
        if (tlv != null) {
            aidV2.termClssOfflineFloorLmt = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F7B"]
        if (tlv != null) {
            aidV2.termOfflineFloorLmt = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F06"]
        if (tlv != null) {
            aidV2.aid = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF01"]
        if (tlv != null) {
            aidV2.selFlag = hexStr2Byte(tlv.value)
        }
        tlv = map["DF17"]
        if (tlv != null) {
            aidV2.targetPer = hexStr2Byte(tlv.value)
        }
        tlv = map["DF16"]
        if (tlv != null) {
            aidV2.maxTargetPer = hexStr2Byte(tlv.value)
        }
        tlv = map["9F1B"]
        if (tlv != null) {
            aidV2.floorLimit = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF15"]
        if (tlv != null) {
            aidV2.threshold = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF13"]
        if (tlv != null) {
            aidV2.TACDenial = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF12"]
        if (tlv != null) {
            aidV2.TACOnline = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF11"]
        if (tlv != null) {
            aidV2.TACDefault = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F01"]
        if (tlv != null) {
            aidV2.AcquierId = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF14"]
        if (tlv != null) {
            aidV2.dDOL = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F09"]
        if (tlv != null) {
            aidV2.version = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F4E"]
        if (tlv != null) {
            aidV2.merchName = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F15"]
        if (tlv != null) {
            aidV2.merchCateCode = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F16"]
        if (tlv != null) {
            aidV2.merchId = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F3C"]
        if (tlv != null) {
            aidV2.referCurrCode = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F3D"]
        if (tlv != null) {
            aidV2.referCurrExp = hexStr2Byte(tlv.value)
        }
        tlv = map["DFC108"]
        if (tlv != null) {
            aidV2.clsStatusCheck = hexStr2Byte(tlv.value)
        }
        tlv = map["DFC109"]
        if (tlv != null) {
            aidV2.zeroCheck = hexStr2Byte(tlv.value)
        }
        tlv = map["DFC10A"]
        if (tlv != null) {
            aidV2.kernelType = hexStr2Byte(tlv.value)
        }
        tlv = map["DFC10B"]
        if (tlv != null) {
            aidV2.paramType = hexStr2Byte(tlv.value)
        }
        tlv = map["9F66"]
        if (tlv != null) {
            aidV2.ttq = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F1C"]
        if (tlv != null) {
            aidV2.termId = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F1D"]
        if (tlv != null) {
            aidV2.riskManData = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF8101"]
        if (tlv != null) {
            aidV2.referCurrCon = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF8102"]
        if (tlv != null) {
            aidV2.tDOL = hexStr2Bytes(tlv.value)
        }
        tlv = map["DFC10C"]
        if (tlv != null) {
            aidV2.kernelID = hexStr2Bytes(tlv.value)
        }
        return aidV2
    }
    private fun hexStr2Rid(hexStr: String?): CapkV2 {
        val capkV2 = CapkV2()
        val map = TLVUtil.buildTLVMap(hexStr)
        var tlv = map["9F06"]
        if (tlv != null) {
            capkV2.rid = hexStr2Bytes(tlv.value)
        }
        tlv = map["9F22"]
        if (tlv != null) {
            capkV2.index = hexStr2Byte(tlv.value)
        }
        tlv = map["DF06"]
        if (tlv != null) {
            capkV2.hashInd = hexStr2Byte(tlv.value)
        }
        tlv = map["DF07"]
        if (tlv != null) {
            capkV2.arithInd = hexStr2Byte(tlv.value)
        }
        tlv = map["DF02"]
        if (tlv != null) {
            capkV2.modul = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF04"]
        if (tlv != null) {
            capkV2.exponent = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF05"]
        if (tlv != null) {
            capkV2.expDate = hexStr2Bytes(tlv.value)
        }
        tlv = map["DF03"]
        if (tlv != null) {
            capkV2.checkSum = hexStr2Bytes(tlv.value)
        }
        return capkV2
    }
    private fun hexStr2Bytes(hexStr: String?): ByteArray {
        if (TextUtils.isEmpty(hexStr)) {
            return ByteArray(0)
        }
        val length = hexStr!!.length / 2
        val chars = hexStr.toCharArray()
        val b = ByteArray(length)
        for (i in 0..<length) {
            b[i] = (char2Byte(chars[i * 2]) shl 4 or char2Byte(chars[i * 2 + 1])).toByte()
        }
        return b
    }
    private fun injectAidsFromJson(context: Context, emvOptV2: EMVOptV2): Int {
        try {
            val aidList = ResourceHelper.loadAidsFromAssets(context) ?: run {
                Timber.e("Không thể load AID từ JSON")
                return 0
            }

            var successCount = 0
            for (aidData in aidList) {
                val entry = aidData.getEntry() ?: continue
                val (type, aidEntry) = entry

                try {
                    val aidV2 = ResourceHelper.convertToAidV2(aidEntry, type)
                    val result = emvOptV2.addAid(aidV2)
                    if (result == 0) {
                        successCount++
                    }
                } catch (e: Exception) {
                    Timber.e(e, "❌ Lỗi khi convert/inject AID $type")
                }
            }

            Timber.i("Đã inject $successCount/${aidList.size} AIDs từ JSON")
            return successCount
        } catch (e: Exception) {
            return 0
        }
    }
    private fun injectCapksFromJson(context: Context, emvOptV2: EMVOptV2): Int {
        try {
            val capkList = ResourceHelper.loadCapksFromAssets(context) ?: run {
                Timber.e("Không thể load CAPK từ JSON")
                return 0
            }

            var successCount = 0
            for (capkData in capkList) {
                try {
                    val capkV2 = ResourceHelper.convertToCapkV2(capkData)
                    val result = emvOptV2.addCapk(capkV2)

                    if (result == 0) {
                        successCount++
                    }
                } catch (e: Exception) {
                    Timber.e(e, "❌ Lỗi khi convert/inject CAPK RID=${capkData.rid}, Index=${capkData.index}")
                }
            }
            Timber.i("Đã inject $successCount/${capkList.size} CAPKs từ JSON")
            return successCount

        } catch (e: Exception) {
            return 0
        }
    }
}